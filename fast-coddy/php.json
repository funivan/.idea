{
  "delimiters": [
    "("
  ],
  "items": [
    {
      /**
       * Group used to check insertion position
       * If you do not provide group name shortcut value will be used
       *
       */
      "group": "",
      /**
       * Can`t be empty
       * MUST be simple and intuitive
       *
       * example: &
       * example: thr
       */
      "shortcut": "",
      /**
       * Replace shortcut to this string
       */
      "expand": "throw new \\Exception()",
      /**
       * Replace before paste
       *
       */
      "replaceRegex": {},
      /**
       * Check if shortcut is regex
       * Default value is false
       */
      "isRegex": false,
      /**
       * Tabs configuration
       * Detect in what tab you need to insert other part of code
       *
       */
      "tabs": {
      },
      /**
       * Variables definition
       * You can set default value, expression
       */
      "vars": {
      },
      /**
       * According to this regex you can use different shortcuts in different files
       *
       */
      "fileRegex": ""
    },
    {
      "group": "variable_handling",
      "shortcut": "(\!?isn|\!?io)",
      "expand": "$1",
      "isRegex": true,
      "regexReplaces": {
        "io": "\\$\\$VAR_VARIABLE_NAME\\$ instanceof \\$VAR_CLASS_NAME\\$",
        "!io": "\\!(\\$\\$VAR_VARIABLE_NAME\\$ instanceof \\$VAR_CLASS_NAME\\$)",
        "isn": "\\$\\$VAR_VARIABLE_NAME\\$ === null",
        "!isn": "\\$\\$VAR_VARIABLE_NAME\\$ \\!= null"
      },
      "vars": {
        "VAR_VARIABLE_NAME": {
          "expression": "completeSmart()",
          "alwaysStopAt": true
        },
        "VAR_CLASS_NAME": {
          "expression": "completeSmart()",
          "alwaysStopAt": true
        }
      }
    },
    {
      /**
       * Type cast
       */
      "group": "cast",
      "shortcut": ":(s|a|i|b|f)",
      "expand": "($1) ",
      "isRegex": true,
      "regexReplaces": {
        "s": "string",
        "a": "array",
        "i": "int",
        "b": "boolean",
        "f": "float"
      }
    },
    {
      "group": "class_fields",
      "shortcut": "(pub|pri)(\\$n|\\$s|\\$a|\\$f|\\$t)",
      "expand": "$1 $$TAB1$ $2;\n",
      "isRegex": true,
      "regexReplaces": {
        "pub": "public",
        "pri": "private",
        "$a": "= []",
        "$n": "",
        "$s": "= \"\"",
        "$f": "= false",
        "$t": "= true"
      }
    },
    {
      /**
       * new line
       */
      "shortcut": "\\n",
      "expand": "echo $TAB1$\"\\n\";"
    },
    {
      /**
       * Variable
       */
      "shortcut": "$",
      "expand": "$"
    },
    {
      "group": "logical_operators",
      "shortcut": "(\\||\&)",
      "isRegex": true,
      "expand": " $1 $TAB1$",
      "regexReplaces": {
        "&": "and",
        "|": "or"
      },
      "tabs": {
        "TAB1": [
          "variable_handling",
          "preg_match_fn"
        ]
      }
    },
    {
      "group": "control_structure",
      "shortcut": "(co|br|rf|ra|rt|rn|rs|r\\$|r;|r)",
      "expand": "$1",
      "isRegex": true,
      "regexReplaces": {
        "co": "continue;",
        "br": "break;",
        "r$": "return \\$this;",
        "ra": "return array();",
        "rs": "return '';",
        "rf": "return false;",
        "rt": "return true;",
        "rn": "return null;",
        "r": "return \\$TAB1\\$;"
      },
      "tabs": {
        "TAB1": []
      }
    },
    {
      "group": "variable_handling",
      "shortcut": "c([!=><0-9]*)",
      "expand": " count($VAR_COUNT_VARIABLE$)$1",
      "isRegex": true,
      "regexReplaces": {
      }
    },
    {
      "group": "if",
      "shortcut": "(eli|if)",
      "expand": " $1($TAB1$){$TAB2$}",
      "isRegex": true,
      "regexReplaces": {
        "eli": "elseif"
      },
      "tabs": {
        "END": [
          "class_method",
          "if"
        ],
        "TAB1": [
          "variable_handling",
          "preg_match_fn",
          "logical_operators",
          "operand"
        ],
        "TAB2": []
      }
    },
    {
      "group": "if",
      "shortcut": "el",
      "expand": " else{$TAB1$}",
      "tabs": {
        "END": [
          "class_method"
        ],
        "TAB1": []
      }
    },
    {
      "group": "variable_handling",
      "shortcut": "(\!)?(iso|isf|isd|isa|isi|isc|iss|in|i|e)",
      "expand": " $1$2($VAR_ITEM$) $TAB2$",
      "isRegex": true,
      "tabs": {
        "TAB2": [
          "variable_handling",
          "logical_operators"
        ]
      },
      "regexReplaces": {
        "iso": "is_object",
        "isf": "is_file",
        "isd": "is_dir",
        "isa": "is_array",
        "isc": "is_callable",
        "isi": "is_int",
        "iss": "is_string",
        "in": "in_array",
        "i": "isset",
        "e": "empty"
      },
      "vars": {
        "VAR_ITEM": {
          "expression": "complete()",
          "alwaysStopAt": true
        }
      }
    },
    {
      /**
       * Not Operand
       */
      "group": "operand",
      "shortcut": "!",
      "expand": "!"
    },
    {
      "group": "preg_match_fn",
      "shortcut": "(prma|prm)",
      "expand": "$1(\"!$VAR_REGEX$!\", $VAR_SUBJECT$, $VAR_MATCHED$)",
      "isRegex": true,
      "regexReplaces": {
        "prma": "preg_match_all",
        "prm": "preg_match"
      },
      "vars": {
        "VAR_REGEX": {
          "alwaysStopAt": true
        },
        "VAR_SUBJECT": {
          "expression": "completeSmart()",
          "alwaysStopAt": true
        },
        "VAR_MATCHED": {
          "defaultValue": "\"$matchedData\"",
          "alwaysStopAt": true
        }
      }
    },
    {
      "group": "preg_replace_fn",
      "shortcut": "prr",
      "expand": "$VAR_SUBJECT_TARGET$ = preg_replace(\"!$VAR_REGEX$!\", '$VAR_TO$', $VAR_SUBJECT$);;",
      "vars": {
        "VAR_REGEX": {
          "alwaysStopAt": true
        },
        "VAR_SUBJECT": {
          "expression": "completeSmart()",
          "alwaysStopAt": true
        },
        "VAR_SUBJECT_TARGET": {
          "defaultValue": "VAR_SUBJECT",
          "alwaysStopAt": false
        },
        "VAR_TO": {
          "alwaysStopAt": false
        }
      }
    },
    {
      "shortcut": "for(k|e)",
      "expand": "foreach($VAR_ARRAY$ as $1$$VAR_VALUE$){\n$TAB1$\n}",
      "isRegex": true,
      "regexReplaces": {
        "e": "",
        "k": "\\$VAR_KEY\\$ => "
      },
      "vars": {
        "VAR_ARRAY": {
          "expression": "complete()",
          "alwaysStopAt": true
        },
        "VAR_KEY": {
          "defaultValue": "\"$key\"",
          "alwaysStopAt": true
        },
        "VAR_VALUE": {
          "expression": "complete()",
          "alwaysStopAt": true
        }
      }
    },
    {
      "shortcut": "thr(i|r|)",
      "expand": " throw new \\$1Exception('$TAB1$');\n",
      "isRegex": true,
      "regexReplaces": {
        "i": "InvalidArgument",
        "r": "Runtime"
      }
    },
    {
      "shortcut": "try",
      "expand": "try { $TAB1$ } catch($VAR_CLASS_NAME$ $e){ $TAB2$ }",
      "vars": {
        "VAR_CLASS_NAME": {
          "expression": "completeSmart()",
          "defaultValue": "\"\\Exception\"",
          "alwaysStopAt": true
        }
      }
    },
    {
      /**
       * Merge several shortcuts combinations
       */
      "group": "class_method",
      "shortcut": "(pub|pro|pri)(s|f|a|sf)?(:s|:i|:b|:a|:\\$|:)?",
      "expand": "$1 $2 function $TAB1$($TAB2$)$3{\n$TAB4$\n}",
      "isRegex": true,
      "regexReplaces": {
        "pub": "public",
        "pro": "protected",
        "pri": "private",
        "s": "static",
        "f": "final",
        "a": "abstract",
        ":s": " : string ",
        ":i": " : int ",
        ":a": " : array ",
        ":b": " : bool ",
        ":$": " : self ",
        ":": " : \\$TAB3\\$ "
      }
    },
    {
      "group": ":iterator",
      "shortcut": "do",
      "expand": "do{\n$TAB1$\n}while($TAB2$);\n",
      "tabs": {
        "END": [
          "class_method"
        ],
        "TAB2": [
          "variable_handling",
          "logical_operators"
        ],
        "TAB1": []
      }
    },
    {
      "group": ":function",
      "shortcut": "fn",
      "expand": "function($TAB1$){\n$TAB2$\n}",
      "tabs": {
        "END": [
          "class_method"
        ],
        "TAB2": []
      }
    },
    {
      "group": ":iterator",
      "shortcut": "while",
      "expand": "while($TAB1$){$TAB2$};\n",
      "tabs": {
        "END": [
          "class_method"
        ],
        "TAB1": [
          "variable_handling",
          "logical_operators"
        ],
        "TAB2": []
      }
    }
  ]
}
